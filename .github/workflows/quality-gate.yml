name: PMAT Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings"

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, llvm-tools-preview
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install PMAT
        run: |
          cargo install pmat --version ">=0.29.6" --features mcp
          pmat --version
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::all -W clippy::pedantic
      
      - name: Build all projects
        run: cargo build --all --all-features
      
      - name: Run tests
        run: cargo test --all --all-features
      
      - name: Run doctests
        run: cargo test --doc --all-features
      
      - name: PMAT Complexity Analysis
        run: |
          echo "::group::Complexity Analysis"
          pmat analyze complexity --max-cyclomatic 20 --fail-on-violation
          echo "::endgroup::"
      
      - name: PMAT SATD Detection
        run: |
          echo "::group::SATD Detection"
          pmat analyze satd --strict --fail-on-violation
          echo "::endgroup::"
      
      - name: PMAT Dead Code Analysis
        run: |
          echo "::group::Dead Code Analysis"
          pmat analyze dead-code --max-percentage 5.0 --fail-on-violation
          echo "::endgroup::"
      
      - name: PMAT Quality Gate
        run: pmat quality-gate --fail-on-violation
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage report
        run: |
          cargo tarpaulin --out Html --output-dir coverage --all --all-features \
            --exclude-files "*/examples/*" --exclude-files "*/tests/*" \
            --ignore-panics --timeout 300
      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(cargo tarpaulin --print-summary --all --all-features | grep "Coverage" | awk '{print $2}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage/tarpaulin-report.html', 'utf8');
            const match = coverage.match(/(\d+\.\d+)%/);
            const percentage = match ? match[1] : 'unknown';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“Š **Coverage Report**: ${percentage}%`
            });

  examples:
    name: Run Examples
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        module: [1, 2, 3, 4, 5]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Module ${{ matrix.module }} Examples
        run: make run-module-${{ matrix.module }}
      
      - name: Run Module ${{ matrix.module }} Tests
        run: |
          cd modules/0${{ matrix.module }}-*
          cargo test --all-features

  property-tests:
    name: Property Testing
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run property tests
        run: |
          cargo test --all --all-features -- --include-ignored quickcheck
          cargo test --all --all-features -- --include-ignored proptest

  fuzzing:
    name: Fuzzing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@nightly
      
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      
      - name: Run fuzzing
        run: |
          cd modules/05-testing
          cargo +nightly fuzz run fuzz_target_1 -- -max_total_time=3600 || true

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: |
          cargo bench --all --no-fail-fast | tee benchmark-results.txt
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt
      
      - name: Check performance regression
        run: |
          if grep -q "slower" benchmark-results.txt; then
            echo "::warning::Performance regression detected"
          fi

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        run: |
          docker build -t mcp-server:test modules/04-mcp-server/
      
      - name: Test Docker image
        run: |
          docker run --rm mcp-server:test --version || true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality, examples, property-tests, benchmarks, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate changelog
        run: |
          echo "## Changes" > CHANGELOG.md
          git log --oneline --no-merges HEAD~10..HEAD >> CHANGELOG.md
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}